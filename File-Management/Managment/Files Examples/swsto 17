Σ’ αυτή την άσκηση καλείστε να αποσπάσετε την «κρυφή λέξη» από έναν «μάντη». Η επικοινωνία σας με
τον μάντη περιορίζεται στην ανταλλαγή λέξεων (οι οποίες αναπαρίστανται ως συμβολοσειρές). Δοκιμάζοντας
μία λέξη τη φορά, ο μάντης θα σας απαντήσει αν η λέξη που επιλέξατε είναι η σωστή, διαφορετικά θα σας
επιστρέψει μία λίστα από λέξεις για να δοκιμάσετε στη συνέχεια. Το παιχνίδι τελειώνει όταν βρείτε την
σωστή λέξη, οπότε και το πρόγραμμά σας θα πρέπει να τερματίζει.
Η υλοποίηση του μάντη θα σας δοθεί σε binary μορφή, ενώ θα έχει το εξής interface:
const char ∗∗ o r a c l e ( const char ∗word ) ;
Συγκεκριμένα, το όρισμα word είναι η λέξη που επιλέγετε να δοκιμάσετε, και το αποτέλεσμα είναι
είτε NULL (που σημαίνει ότι το word ήταν η κρυφή λέξη) είτε ένας πίνακας από λέξεις/συμβολοσειρές,
αγνώστου μεγέθους, ο οποίος θα είναι πάντα τερματισμένος με NULL. Η μνήμη που έχει δεσμευτεί για τον
πίνακα των αποτελεσμάτων θα επαναχρησιμοποιηθεί σε επόμενες κλήσεις της oracle(), οπότε φροντίζετε
να αντιγράφετε τα αποτελέσματά της (αν τα χρειάζεστε) πριν την καλέσετε ξανά. Μπορείτε να ξεκινήσετε
την πρώτη κλήση δίνοντας ως όρισμα την κενή συμβολοσειρά.
Μπορεί κανείς να σκεφτεί την έρευνα που κάνετε σαν ένα (νοητό) δέντρο. Κάθε κόμβος είναι μία λέξη
και τα παιδιά του είναι οι επόμενες λέξεις για έρευνα, όπως τις επιστρέφει η oracle, εκτός από όσες από
αυτές τις λέξεις έχουν ερευνηθεί στο παρελθόν. Μια και η oracle επιστρέφει πίνακα άγνωστου μεγέθους,
κάθε κόμβος έχει μεταβλητό αριθμό από παιδιά.
Το πρόβλημα είναι ότι ένα τέτοιο δέντρο γίνεται τεράστιο: θα έχει έναν κόμβο για κάθε λέξη που
εξετάζετε. Για να αντιμετωπιστεί αυτό το πρόβλημα εφαρμόζουμε δύο ιδέες: α) κρατάτε το δέντρο μόνο
μέχρι ένα συγκεκριμένο βάθος d το οποίο είναι παράμετρος (command-line parameter) στο πρόγραμμά
σας, β) για να μην πέσετε σε κύκλο και εξετάζετε συνεχώς τις ίδιες λέξεις, χρησιμοποιείτε μια τεχνική
ανίχνευσης στοιχείων σε σύνολο, που ονομάζεται bloom filter. Το bloom filter κρατάει μια υπερ-εκτίμηση
του τι υπάρχει μέσα στο (νοητό) δέντρο.
Bloom Filter – Περιγραφή Δομής.  ́Ενα bloom filter (βλ. http://en.wikipedia.org/wiki/
Bloom_filter) είναι μία συμπαγής δομή η οποία χρησιμοποιείται για τον έλεγχο της ύπαρξης ενός στοιχείου
σε ένα σύνολο. Αναλυτικότερα, χρησιμοποιώντας το bloom filter για ένα δεδομένο στοιχείο, μπορούμε να
εξάγουμε ένα από τα παρακάτω συμπεράσματα. Είτε ότι (i) το στοιχείο σίγουρα δεν ανήκει στο
σύνολο, ή ότι (ii) το στοιχείο είναι πιθανόν να ανήκει στο σύνολο.
Δηλαδή το bloom filter μπορεί να απαντήσει θετικά ότι ένα στοιχείο ανήκει στο σύνολο, ακόμα κι όταν
δεν ανήκει (false positive). Αντίθετα, η αρνητική απάντηση είναι πάντα έγκυρη. Με αυτόν το τρόπο, το
bloom filter κάνει μία υπερεκτίμηση των στοιχείων του συνόλου. Η πιθανότητα λάθους (σε περίπτωση
θετικής απάντησης) αυξάνεται όσο προστίθενται στοιχεία στο σύνολο.
 ́Ενα bloom filter αναπαρίσταται ως ένας πίνακας από bits M θέσεων (αρχικοποιημένος με 0), και συνο-
δεύεται από K hash functions. Ακολουθούν οι βασικές πράξεις που υποστηρίζει και το πως υλοποιούνται:
1. Για να εισάγουμε ένα στοιχείο e στο σύνολο, εφαρμόζουμε κάθε μία από αυτές τις K hash functions
στο εν λόγω στοιχείο. Αυτές θα επιστρέψουν K θέσεις στον πίνακα (που κάποιες πιθανόν να συμπίπτουν).
 ́Επειτα, σε κάθε μία από αυτές τις θέσεις θέτουμε το αντίστοιχο bit σε 1.
2. Για να ελέγξουμε αν ένα στοιχείο e ανήκει στο σύνολο, εφαρμόζουμε κάθε μία από αυτές τις K hash
functions στο εν λόγω στοιχείο. Αν σε κάθε μία από τις K θέσεις που μας επιστρέφουν υπάρχουν 1, τότε το
στοιχείο e (πιθανόν) να ανήκει στο σύνολο. Διαφορετικά (αν υπάρχει έστω κι ένα 0), σίγουρα τ
