The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function     it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity     but only against unintentional corruption. It remains suitable for other non-cryptographic purposes     for example for determining the partition for a particular key in a partitioned database.[3]

60	85	70	64	1660	85	70	64	16
36	92	62	70	47 60	85	70	64	16
36	92	62	70	47
20	82	29	75	10
3	71	23	23	92
95	87	97	18	40
21	22	95	81	77
55	78	31	24	74
36	75	17	47	92
55	76	82	82	49
28	68	56	84	12
24	64	27	25	71
83	98	47	14	81
29	21	93	1	21
46	85	57	80	32
68	54	30	31	5
21	14	51	90	98
86	20	72	82	88
45	11	70	36	98
96	92	10	60	50
92	99	52	99	4
20	82	29	75	10
3	71	23	23	92
95	87	97	18	40
21	22	95	81	77
55	78	31	24	74
36	75	17	47	92
55	76	82	82	49
28	68	56	84	12
24	64	27	25	71
83	98	47	14	81
29	21	93	1	21
46	85	57	80	32
68	54	30	31	5
21	14	51	90	98
86	20	72	82	88
45	11	70	36	98
96	92	10	60	50
92	99	52	99	4
36	92	62	70	47
20	82	29	75	10
3	71	23	23	92
95	87	97	18	40
21	22	95	81	77
55	78	31	24	74
36	75	17	47	92
55	76	82	82	49
28	68	56	84	12
24	64	27	25	71
83	98	47	14	81
29	21	93	1	21
46	85	57	80	32
68	54	30	31	5
21	14	51	90	98
86	20	72	82	88
45	11	70	36	98
96	92	10	60	50
92	99	52	99	4
One basic requirement of any cryptographic hash function is that it should be computationally infeasible to find two distinct messages which hash to the same value. MD5 fails this requirement catastrophically; such collisions can be found in seconds on an ordinary home computer.

The weaknesses of MD5 have been exploited in the field     most infamously by the Flame malware in 2012. The CMU Software Engineering Institute considers MD5 essentially "cryptographically broken and unsuitable for further use".[4]

MD5 was designed by Ronald Rivest in 1991 to replace an earlier hash function MD4    [5] and was specified in 1992 as RFC 1321.


Contents
1	History and cryptanalysis
2	Security
2.1	Overview of security issues
2.2	Collision vulnerabilities
2.3	Preimage vulnerability
3	Applications
4	Algorithm
4.1	Pseudocode
5	MD5 hashes
6	Implementations
7	See also
8	References
8.1	Further reading
9	External links
History and cryptanalysis
MD5 is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT (Rivest     1992). When analytic work indicated that MD5's predecessor MD4 was likely to be insecure     Rivest designed MD5 in 1991 as a secure replacement. (Hans Dobbertin did indeed later find weaknesses in MD4.)

In 1993     Den Boer and Bosselaers gave an early     although limited     result of finding a "pseudo-collision" of the MD5 compression function; that is     two different initialization vectors that produce an identical digest.

In 1996     Dobbertin announced a collision of the compression function of MD5 (Dobbertin     1996). While this was not an attack on the full MD5 hash function     it was close enough for cryptographers to recommend switching to a replacement     such as SHA-1 or RIPEMD-160.

The size of the hash value (128 bits) is small enough to contemplate a birthday attack. MD5CRK was a distributed project started in March 2004 with the aim of demonstrating that MD5 is practically insecure by finding a collision using a birthday attack.

MD5CRK ended shortly after 17 August 2004     when collisions for the full MD5 were announced by Xiaoyun Wang     Dengguo Feng     Xuejia Lai     and Hongbo Yu.[6][7] Their analytical attack was reported to take only one hour on an IBM p690 cluster.[8]

On 1 March 2005     Arjen Lenstra     Xiaoyun Wang     and Benne de Weger demonstrated construction of two X.509 certificates with different public keys and the same MD5 hash value     a demonstrably practical collision.[9] The construction included private keys for both public keys. A few days later     Vlastimil Klima described an improved algorithm     able to construct MD5 collisions in a few hours on a single notebook computer.[10] On 18 March 2006     Klima published an algorithm that could find a collision within one minute on a single notebook computer     using a method he calls tunneling.[11]

Various MD5-related RFC errata have been published. In 2009     the United States Cyber Command used an MD5 hash value of their mission statement as a part of their official emblem.[12]

On 24 December 2010     Tao Xie and Dengguo Feng announced the first published single-block (512-bit) MD5 collision.[13] (Previous collision discoveries had relied on multi-block attacks.) For "security reasons"     Xie and Feng did not disclose the new attack method. They issued a challenge to the cryptographic community     offering a US$10    000 reward to the first finder of a different 64-byte collision before 1 January 2013. Marc Stevens responded to the challenge and published colliding single-block messages as well as the construction algorithm and sources.[14]

In 2011 an informational RFC 6151[15] was approved to update the security considerations in MD5[16] and HMAC-MD5.[17]

Security
The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 224.1).[18] Further     there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours     using off-the-shelf computing hardware (complexity 239).[19] The ability to find collisions has been greatly aided by the use of off-the-shelf GPUs. On an NVIDIA GeForce 8400GS graphics processor     16â€“18 million hashes per second can be computed. An NVIDIA GeForce 8800 Ultra can calculate more than 200 million hashes per second.[20]

These hash and collision attacks have been demonstrated in the public in various situations     including colliding document files[21][22] and digital certificates.[23] As of 2015     MD5 was demonstrated to be still quite widely used     most notably by security research and antivirus companies.[24]

Overview of security issues
In 1996     a flaw was found in the design of MD5. While it was not deemed a fatal weakness at the time     cryptographers began recommending the use of other algorithms     such as SHA-1     which has since been found to be vulnerable as well.[25] In 2004 it was shown that MD5 is not collision-resistant.[26] As such     MD5 is not suitable for applications like SSL certificates or digital signatures that rely on this property for digital security. Also in 2004 more serious flaws were discovered in MD5     making further use of the algorithm for security purposes questionable; specifically     a group of researchers described how to create a pair of files that share the same MD5 checksum.[6][27] Further advances were made in breaking MD5 in 2005     2006     and 2007.[28] In December 2008     a group of researchers used this technique to fake SSL certificate validity.[23][29]

As of 2010     the CMU Software Engineering Institute considers MD5 "cryptographically broken and unsuitable for further use"    [30] and most U.S. government applications now require the SHA-2 family of hash functions.[31] In 2012     the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature.

-54035.73    90224.52    9819.8    99283.92    15908.97    92672.1    32832.6    53060.86    -83425.42    69107.41    25047.08    70706.14    -46791.18    92942.57    -68632.88    -57500.37    72254.15    91957.52    57566.7    10898.85    -80106.41    57799.96    -65662.65    -30650.44    -97368.57    19004.36    64703.17    23038.3    -21490.95    -48908.48    -80392.31    -97065.66    41904.1    48625.13    26343.82    1540.08    -66169.62    24403.2    -58546.45    90260.6    86514.2    40662.22    34233.43    -81661.38    -47897.16    43683.1    96556.41    -82751.75    14172.93    13326.22    84467.8    -88375.7    22997.15    42198.62    5082.01    -12965.98    -28482.82    -95809.73    -23781.33    93396.6    66029.68    -67668.07    -69257.26    -49583.92    45950.5    56248.12    75305.87    82979.49    95117.19    28342.41    61231.67    93105.82    37598.57    -34755.96    5282.19    -38673.85    13440.79    6490.27    -57055.5    -19656.6    -4386.24    7926.91    -25569.7    -48260.96    84714.34    2934.69    66022.78    -26662.96    67494.73    92346.48    31294.08    -53009.96    -26255.62    -70661.11    52638.82    -51376.35    25047.91    -26531.5    -58679.3    -41562.43


Collision vulnerabilities
Further information: Collision attack
In 1996     collisions were found in the compression function of MD5     and Hans Dobbertin wrote in the RSA Laboratories technical newsletter     "The presented attack does not yet threaten practical applications of MD5     but it comes rather close ... in the future MD5 should no longer be implemented ... where a collision-resistant hash function is required."[32]

In 2005     researchers were able to create pairs of PostScript documents[33] and X.509 certificates[34] with the same hash. Later that year     MD5's designer Ron Rivest wrote that "md5 and sha1 are both clearly broken (in terms of collision-resistance)".[35]

On 30 December 2008     a group of researchers announced at the 25th Chaos Communication Congress how they had used MD5 collisions to create an intermediate certificate authority certificate that appeared to be legitimate when checked by its MD5 hash.[23] The researchers used a cluster of Sony PlayStation 3 units at the EPFL in Lausanne     Switzerland[36] to change a normal SSL certificate issued by RapidSSL into a working CA certificate for that issuer     which could then be used to create other certificates that would appear to be legitimate and issued by RapidSSL. VeriSign     the issuers of RapidSSL certificates     said they stopped issuing new certificates using MD5 as their checksum algorithm for RapidSSL once the vulnerability was announced.[37] Although Verisign declined to revoke existing certificates signed using MD5     their response was considered adequate by the authors of the exploit (Alexander Sotirov     Marc Stevens     Jacob Appelbaum     Arjen Lenstra     David Molnar     Dag Arne Osvik     and Benne de Weger).[23] Bruce Schneier wrote of the attack that "we already knew that MD5 is a broken hash function" and that "no one should be using MD5 anymore".[38] The SSL researchers wrote     "Our desired impact is that Certification Authorities will stop using MD5 in issuing new certificates. We also hope that use of MD5 in other applications will be reconsidered as well."[23]

In 2012     according to Microsoft     the authors of the Flame malware used an MD5 collision to forge a Windows code-signing certificate.[39]

MD5 uses the Merkleâ€“DamgÃ¥rd construction     so if two prefixes with the same hash can be constructed     a common suffix can be added to both to make the collision more likely to be accepted as valid data by the application using it. Furthermore     current collision-finding techniques allow to specify an arbitrary prefix: an attacker can create two colliding files that both begin with the same content. All the attacker needs to generate two colliding files is a template file with a 128-byte block of data     aligned on a 64-byte boundary that can be changed freely by the collision-finding algorithm. An example MD5 collision     with the two messages differing in 6 bits     is:

d131dd02c5e6eec4 693d9a0698aff95c 2fcab58712467eab 4004583eb8fb7f89
55ad340609f4b302 83e488832571415a 085125e8f7cdc99f d91dbdf280373c5b
d8823e3156348f5b ae6dacd436c919c6 dd53e2b487da03fd 02396306d248cda0
e99f33420f577ee8 ce54b67080a80d1e c69821bcb6a88393 96f9652b6ff72a70
d131dd02c5e6eec4 693d9a0698aff95c 2fcab50712467eab 4004583eb8fb7f89
55ad340609f4b302 83e4888325f1415a 085125e8f7cdc99f d91dbd7280373c5b
d8823e3156348f5b ae6dacd436c919c6 dd53e23487da03fd 02396306d248cda0
e99f33420f577ee8 ce54b67080280d1e c69821bcb6a88393 96f965ab6ff72a70
Both produce the MD5 hash 79054025255fb1a26e4bc422aef54eb4.[40] The difference between the two samples is that the leading bit in each nibble has been flipped. For example     the 20th byte (offset 0x13) in the top sample     0x87     is 10000111 in binary. The leading bit in the byte (also the leading bit in the first nibble) is flipped to make 00000111     which is 0x07     as shown in the lower sample.
324 324 2 332 4 32 4 234 23 5 436 34 73 4 457 45 7 547 54   3445 34 54 5 43 5 346 6 25 7654 7 34 74  5 654 674 574
Later it was also found to be possible to construct collisions between two files with separately chosen prefixes. This technique was used in the creation of the rogue CA certificate in 2008. A new variant of parallelized collision searching using MPI was proposed by Anton Kuznetsov in 2014     which allowed to find a collision in 11 hours on a computing cluster.[41]

Preimage vulnerability
In April 2009     a preimage attack against MD5 was published that breaks MD5's preimage resistance. This attack is only theoretical     with a computational complexity of 2123.4 for full preimage.[42][43]

45 7 47 38 6538 64 8356 86 865  8 56 8 58 5 8 48  8  8  85 8  856 856  8 56 8 56 8 56 856 8 56 856 8 56 8 56 56 856 868  579 9 5 4 4 43 55 46 4 45 7 47 38 6538 64 8356 86 865  8 56 8 58 5 8 48  8  8  85 8  856 856  8 56 8 56 8 56 856 8 56 856 8 56 8 56 56 856 868  579 9 5 4 4 43 55 46 4 7 864 79 0 57 07 347 52726 7 25 386 9 5995 7088705 5078 0 679 356 836486 25 754 54  45 34 854 8 43 85 85 4 84 54 8 8 579 860 78 50 56 46 5 746 
 7 864 79 0 57 07 347 52726 7 25 386 9 5995 7088705 5078 0 679 356 836486 25 754 54  45 34 854 8 43 85 85 4 84 54 8 8 579 860 78 50 56 46 5 746 
45 7 47 38 6538 64 8356 86 865  8 56 8 58 5 8 48  8  8  85 8  856 856  8 56 8 56 8 56 856 8 56 856 8 56 8 56 56 856 868  579 9 5 4 4 43 55 46 4 7 864 79 0 57 07 347 52726 7 25 386 9 5995 7088705 5078 0 679 356 836486 25 754 54  45 34 854 8 43 85 85 4 84 54 8 8 579 860 78 50 56 46 5 746 

Applications
MD5 digests have been widely used in the software world to provide some assurance that a transferred file has arrived intact. For example     file servers often provide a pre-computed MD5 (known as md5sum) checksum for the files     so that a user can compare the checksum of the downloaded file to it. Most unix-based operating systems include MD5 sum utilities in their distribution packages; Windows users may use the included PowerShell function "Get-FileHash"     install a Microsoft utility    [44][45] or use third-party applications. Android ROMs also use this type of checksum.

The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function     it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity     but only against unintentional corruption. It remains suitable for other non-cryptographic purposes     for example for determining the partition for a particular key in a partitioned database.[3]

One basic requirement of any cryptographic hash function is that it should be computationally infeasible to find two distinct messages which hash to the same value. MD5 fails this requirement catastrophically; such collisions can be found in seconds on an ordinary home computer.

The weaknesses of MD5 have been exploited in the field     most infamously by the Flame malware in 2012. The CMU Software Engineering Institute considers MD5 essentially "cryptographically broken and unsuitable for further use".[4]

MD5 was designed by Ronald Rivest in 1991 to replace an earlier hash function MD4    [5] and was specified in 1992 as RFC 1321.


Contents
1	History and cryptanalysis
2	Security
2.1	Overview of security issues
2.2	Collision vulnerabilities
2.3	Preimage vulnerability
3	Applications
4	Algorithm
4.1	Pseudocode
5	MD5 hashes
6	Implementations
7	See also
8	References
8.1	Further reading
9	External links
History and cryptanalysis
MD5 is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT (Rivest     1992). When analytic work indicated that MD5's predecessor MD4 was likely to be insecure     Rivest designed MD5 in 1991 as a secure replacement. (Hans Dobbertin did indeed later find weaknesses in MD4.)

In 1993     Den Boer and Bosselaers gave an early     although limited     result of finding a "pseudo-collision" of the MD5 compression function; that is     two different initialization vectors that produce an identical digest.

In 1996     Dobbertin announced a collision of the compression function of MD5 (Dobbertin     1996). While this was not an attack on the full MD5 hash function     it was close enough for cryptographers to recommend switching to a replacement     such as SHA-1 or RIPEMD-160.

The size of the hash value (128 bits) is small enough to contemplate a birthday attack. MD5CRK was a distributed project started in March 2004 with the aim of demonstrating that MD5 is practically insecure by finding a collision using a birthday attack.

MD5CRK ended shortly after 17 August 2004     when collisions for the full MD5 were announced by Xiaoyun Wang     Dengguo Feng     Xuejia Lai     and Hongbo Yu.[6][7] Their analytical attack was reported to take only one hour on an IBM p690 cluster.[8]

On 1 March 2005     Arjen Lenstra     Xiaoyun Wang     and Benne de Weger demonstrated construction of two X.509 certificates with different public keys and the same MD5 hash value     a demonstrably practical collision.[9] The construction included private keys for both public keys. A few days later     Vlastimil Klima described an improved algorithm     able to construct MD5 collisions in a few hours on a single notebook computer.[10] On 18 March 2006     Klima published an algorithm that could find a collision within one minute on a single notebook computer     using a method he calls tunneling.[11]

Various MD5-related RFC errata have been published. In 2009     the United States Cyber Command used an MD5 hash value of their mission statement as a part of their official emblem.[12]

On 24 December 2010     Tao Xie and Dengguo Feng announced the first published single-block (512-bit) MD5 collision.[13] (Previous collision discoveries had relied on multi-block attacks.) For "security reasons"     Xie and Feng did not disclose the new attack method. They issued a challenge to the cryptographic community     offering a US$10    000 reward to the first finder of a different 64-byte collision before 1 January 2013. Marc Stevens responded to the challenge and published colliding single-block messages as well as the construction algorithm and sources.[14]

In 2011 an informational RFC 6151[15] was approved to update the security considerations in MD5[16] and HMAC-MD5.[17]

Security
The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 224.1).[18] Further     there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours     using off-the-shelf computing hardware (complexity 239).[19] The ability to find collisions has been greatly aided by the use of off-the-shelf GPUs. On an NVIDIA GeForce 8400GS graphics processor     16â€“18 million hashes per second can be computed. An NVIDIA GeForce 8800 Ultra can calculate more than 200 million hashes per second.[20]

These hash and collision attacks have been demonstrated in the public in various situations     including colliding document files[21][22] and digital certificates.[23] As of 2015     MD5 was demonstrated to be still quite widely used     most notably by security research and antivirus companies.[24]

Overview of security issue In 1996     a flaw was found in the design of MD5. While it was not deemed a fatal weakness at the time     cryptographers began recommending the use of other algorithms     such as SHA-1     which has since been found to be vulnerable as well.[25] In 2004 it was shown that MD5 is not collision-resistant.[26] As such     MD5 is not suitable for applications like SSL certificates or digital signatures that rely on this property for digital security. Also in 2004 more serious flaws were discovered in MD5     making further use of the algorithm for security purposes questionable; specifically     a group of researchers described how to create a pair of files that share the same MD5 checksum.[6][27] Further advances were made in 
breaking MD5 in 2005     2006     and 2007.[28] In December 2008     a group of researchers used this technique to fake SSL certificate validity.[23][29]

As of 2010     the CMU Software Engineering Institute considers MD5 "cryptographically broken and unsuitable for further use"    [30] and most U.S. government applications now require the SHA-2 family of hash functions.[31] In 2012     the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature.
-51840.92    -87495.26    15111.59    31555.29    -21925.88    -70146.65    92900.95    -21632.32    -47921.96    -11050.89
-51840.92    -87495.26    15111.59    31555.29    -21925.88    -70146.65    92900.95    -21632.32    -47921.96    -11050.89
Collision vulnerabilities
Further information: Collision attack
In 1996     collisions were found in the compression function of MD5     and Hans Dobbertin wrote in the RSA Laboratories technical newsletter     "The presented attack does not yet threaten practical applications of MD5     but it comes rather close ... in the future MD5 should no longer be implemented ... where a collision-resistant hash function is required."[32]

In 2005     researchers were able to create pairs of PostScript documents[33] and X.509 certificates[34] with the same hash. Later that year     MD5's designer Ron Rivest wrote that "md5 and sha1 are both clearly broken (in terms of collision-resistance)".[35]

On 30 December 2008     a group of researchers announced at the 25th Chaos Communication Congress how they had used MD5 collisions to create an intermediate certificate authority certificate that appeared to be legitimate when checked by its MD5 hash.[23] The researchers used a cluster of Sony PlayStation 3 units at the EPFL in Lausanne     Switzerland[36] to change a normal SSL certificate issued by RapidSSL into a working CA certificate for that issuer     which could then be used to create other certificates that would appear to be legitimate and issued by RapidSSL. VeriSign     the issuers of RapidSSL certificates     said they stopped issuing new certificates using MD5 as their checksum algorithm for RapidSSL once the vulnerability was announced.[37] Although Verisign declined to revoke existing certificates signed using MD5     their response was considered adequate by the authors of the exploit (Alexander Sotirov     Marc Stevens     Jacob Appelbaum     Arjen Lenstra     David Molnar     Dag Arne Osvik     and Benne de Weger).[23] Bruce Schneier wrote of the attack that "we already knew that MD5 is a broken hash function" and that "no one should be using MD5 anymore".[38] The SSL researchers wrote     "Our desired impact is that Certification Authorities will stop using MD5 in issuing new certificates. We also hope that use of MD5 in other applications will be reconsidered as well."[23]

In 2012     according to Microsoft     the authors of the Flame malware used an MD5 collision to forge a Windows code-signing certificate.[39]

MD5 uses the Merkleâ€“DamgÃ¥rd construction     so if two prefixes with the same hash can be constructed     a common suffix can be added to both to make the collision more likely to be accepted as valid data by the application using it. Furthermore     current collision-finding techniques allow to specify an arbitrary prefix: an attacker can create two colliding files that both begin with the same content. All the attacker needs to generate two colliding files is a template file with a 128-byte block of data     aligned on a 64-byte boundary that can be changed freely by the collision-finding algorithm. An example MD5 collision     with the two messages differing in 6 bits     is:

d131dd02c5e6eec4 693d9a0698aff95c 2fcab58712467eab 4004583eb8fb7f89
55ad340609f4b302 83e488832571415a 085125e8f7cdc99f d91dbdf280373c5b
d8823e3156348f5b ae6dacd436c919c6 dd53e2b487da03fd 02396306d248cda0
e99f33420f577ee8 ce54b67080a80d1e c69821bcb6a88393 96f9652b6ff72a70
d131dd02c5e6eec4 693d9a0698aff95c 2fcab50712467eab 4004583eb8fb7f89
55ad340609f4b302 83e4888325f1415a 085125e8f7cdc99f d91dbd7280373c5b
d8823e3156348f5b ae6dacd436c919c6 dd53e23487da03fd 02396306d248cda0
e99f33420f577ee8 ce54b67080280d1e c69821bcb6a88393 96f965ab6ff72a70
Both produce the MD5 hash 79054025255fb1a26e4bc422aef54eb4.[40] The difference between the two samples is that the leading bit in each nibble has been flipped. For example     the 20th byte (offset 0x13) in the top sample     0x87     is 10000111 in binary. The leading bit in the byte (also the leading bit in the first nibble) is flipped to make 00000111     which is 0x07     as shown in the lower sample.

Later it was also found to be possible to construct collisions between two files with separately chosen prefixes. This technique was used in the creation of the rogue CA certificate in 2008. A new variant of parallelized collision searching using MPI was proposed by Anton Kuznetsov in 2014     which allowed to find a collision in 11 hours on a computing cluster.[41]
60	85	70	64	16
36	92	62	70	47
20	82	29	75	10
3	71	23	23	92
95	87	97	18	40
21	22	95	81	77
55	78	31	24	74
36	75	17	47	92
55	76	82	82	49
28	68	56	84	12
24	64	27	25	71
83	98	47	14	81
29	21	93	1	21
46	85	57	80	32
68	54	30	31	5
21	14	51	90	98
86	20	72	82	88
45	11	70	36	98 -51840.92    -87495.26    15111.59    31555.29    -21925.88    -70146.65    92900.95    -21632.32    -47921.96    -11050.89
96	92	10	60	50
92	99	52	99	4 60	85	70	64	16
36	92	62	70	47
20	82	29	75	10
3	71	23	23	92 -51840.92    -87495.26    15111.59    31555.29    -21925.88    -70146.65    92900.95    -21632.32    -47921.96    -11050.89
95	87	97	18	40
21	22	95	81	77
55	78	31	24	74
36	75	17	47	92
55	76	82	82	49
28	68	56	84	12
24	64	27	25	71
83	98	47	14	81
29	21	93	1	21
46	85	57	80	32
68	54	30	31	5
21	14	51	90	98
86	20	72	82	88
45	11	70	36	98
96	92	10	60	50
92	99	52	99	4
Preimage vulnerability
In April 2009     a preimage attack against MD5 was published that breaks MD5's preimage resistance. This attack is only theoretical     with a computational complexity of 2123.4 for full preimage.[42][43]

Applications
MD5 digests have been widely used in the software world to provide some assurance that a transferred file has arrived intact. For example     file servers often provide a pre-computed MD5 (known as md5sum) checksum for the files     so that a user can compare the checksum of the downloaded file to it. Most unix-based operating systems include MD5 sum utilities in their distribution packages; Windows users may use the included PowerShell function "Get-FileHash"     install a Microsoft utility    [44][45] or use third-party applications. Android ROMs also use this type of checksum.
